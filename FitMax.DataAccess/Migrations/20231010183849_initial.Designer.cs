// <auto-generated />
using System;
using FitMax.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitMax.DataAccess.Migrations
{
    [DbContext(typeof(FitMaxContext))]
    [Migration("20231010183849_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FitMax.DataAccess.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("FitMax.DataAccess.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DataConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Package")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PackageEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PackageStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TrainerPrice")
                        .HasColumnType("money");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FitMax.Entity.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FitMax.Entity.Entities.CartLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartLines");
                });

            modelBuilder.Entity("FitMax.Entity.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FitMax.Entity.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "3 Aylık Salon Üyeliği",
                            Description2 = "Standart Program Desteği",
                            Description3 = "Grup Derslerine Katılma Hakkı",
                            Name = "3 Ay",
                            Price = 3050m
                        },
                        new
                        {
                            Id = 2,
                            Description = "6 Aylık Salon Üyeliği",
                            Description2 = "Aktif Program Desteği",
                            Description3 = "Grup Derslerine Katılma Hakkı",
                            Name = "6 Ay",
                            Price = 6200m
                        },
                        new
                        {
                            Id = 3,
                            Description = "12 Aylık Salon Üyeliği",
                            Description2 = "Tam Program Desteği",
                            Description3 = "Grup Derslerine Katılma Hakkı",
                            Name = "12 Ay",
                            Price = 10100m
                        });
                });

            modelBuilder.Entity("FitMax.Entity.Entities.PrivateLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lesson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TrainerPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("PrivateLessons");
                });

            modelBuilder.Entity("FitMax.Entity.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Purchaseprice")
                        .HasColumnType("money");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Musclecloth Lifting Strap Kırmızı",
                            ImgUrl = "/images/Musclecloth.jpeg",
                            Name = "Musclecloth Lifting Strap Kırmızı",
                            Price = 95m,
                            ProductType = "spor",
                            Purchaseprice = 60m,
                            Status = true,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            Description = "Musclecloth Pro Wrist Wraps Siyah Kırmızı 2'li Paket",
                            ImgUrl = "/images/Wrist.jpeg",
                            Name = "Musclecloth Pro Wrist Wraps",
                            Price = 150m,
                            ProductType = "spor",
                            Purchaseprice = 70m,
                            Status = true,
                            Stock = 25
                        },
                        new
                        {
                            Id = 3,
                            Description = "Busso Klips-20 Kısa Bar Kelebek Klips",
                            ImgUrl = "/images/kelebek.jpeg",
                            Name = "Busso Klips-20 Kısa Bar Kelebek Klips",
                            Price = 67m,
                            ProductType = "spor",
                            Purchaseprice = 30m,
                            Status = true,
                            Stock = 45
                        },
                        new
                        {
                            Id = 4,
                            Description = "Delta Bat Grip Pad (El Pedi) Ağırlık Body Fitness Dambıl Eldiveni",
                            ImgUrl = "/images/10.jpeg",
                            Name = "Delta Bat Grip Pad (El Pedi) Ağırlık Body ",
                            Price = 145m,
                            ProductType = "spor",
                            Purchaseprice = 90m,
                            Status = true,
                            Stock = 55
                        },
                        new
                        {
                            Id = 5,
                            Description = "Dragon Fat Gripz Silikon Dambıl Halter Sapları Kaymaz Koruma Pedi",
                            ImgUrl = "/images/11.jpeg",
                            Name = "Dragon Fat Gripz Silikon Dambıl Halter Sapları",
                            Price = 160m,
                            ProductType = "spor",
                            Purchaseprice = 130m,
                            Status = true,
                            Stock = 12
                        },
                        new
                        {
                            Id = 6,
                            Description = "MProforce Db-Zen Ayarlanabilir Dambıl - 24 kg",
                            ImgUrl = "/images/123.jpeg",
                            Name = "Proforce Db-Zen Ayarlanabilir Dambıl",
                            Price = 3600m,
                            ProductType = "spor",
                            Purchaseprice = 2700m,
                            Status = true,
                            Stock = 16
                        },
                        new
                        {
                            Id = 15,
                            Description = "Scucs Koordinasyon Çemberi 12'li",
                            ImgUrl = "/images/14.jpeg",
                            Name = "Scucs Koordinasyon Çemberi 12'li",
                            Price = 198m,
                            ProductType = "spor",
                            Purchaseprice = 100m,
                            Status = true,
                            Stock = 50
                        },
                        new
                        {
                            Id = 7,
                            Description = "Hardline Whey 3 Matrix Protein Tozu 2300 gr",
                            ImgUrl = "/images/p1.jpeg",
                            Name = "Hardline Whey 3 Matrix Protein Tozu 2300 gr",
                            Price = 166m,
                            ProductType = "besin",
                            Purchaseprice = 1000m,
                            Status = true,
                            Stock = 22
                        },
                        new
                        {
                            Id = 8,
                            Description = "Navy Plus Nutrition 2300 gr Whey Protein Tozu Çilek Aromalı + Shaker + Askılı Çanta + Antrenman Havlusu + 2 x Protein Bar",
                            ImgUrl = "/images/p2.jpeg",
                            Name = "Navy Plus Nutrition 2300 gr Whey Protein Tozu ",
                            Price = 1645m,
                            ProductType = "besin",
                            Purchaseprice = 1200m,
                            Status = true,
                            Stock = 50
                        },
                        new
                        {
                            Id = 9,
                            Description = "High Whey Protein 2280 gr Çikolata Aromalı Protein Tozu 24 Gram Protein 76 Servis",
                            ImgUrl = "/images/p4.jpeg",
                            Name = "High Whey Protein 2280 gr Çikolata Aromalı ",
                            Price = 452m,
                            ProductType = "besin",
                            Purchaseprice = 201m,
                            Status = true,
                            Stock = 47
                        },
                        new
                        {
                            Id = 10,
                            Description = "Ronic Nutrition Ultimate Isolate Whey Protein Tozu 2270 gr + Shaker ve 2 Adet Tek Kullanımlık Whey Protein",
                            ImgUrl = "/images/p5.jpeg",
                            Name = "Ronic Nutrition Ultimate Isolate Whey Protein Tozu ",
                            Price = 980m,
                            ProductType = "besin",
                            Purchaseprice = 650m,
                            Status = true,
                            Stock = 20
                        },
                        new
                        {
                            Id = 11,
                            Description = "Nutripure Whey Classic Protein Tozu 2000 gr - Çikolata Aromalı",
                            ImgUrl = "/images/p6.jpeg",
                            Name = "Nutripure Whey Classic Protein Tozu 2000 gr",
                            Price = 682m,
                            ProductType = "besin",
                            Purchaseprice = 252m,
                            Status = true,
                            Stock = 24
                        },
                        new
                        {
                            Id = 12,
                            Description = "High Whey Protein Tozu 2280 gr Çilek Aromalı Protein Tozu 24 Gram Protein Kas Güç 76 Servis Shaker Hediyeli",
                            ImgUrl = "/images/p9.jpeg",
                            Name = "High Whey Protein Tozu 2280 gr Çilek Aromalı ",
                            Price = 470m,
                            ProductType = "besin",
                            Purchaseprice = 230m,
                            Status = true,
                            Stock = 44
                        },
                        new
                        {
                            Id = 13,
                            Description = "Pharma Whey Protein 2196 gr Çikolata Aromalı Whey Protein Tozu 24 gr Protein 5 gr Bcaa",
                            ImgUrl = "/images/p12.jpeg",
                            Name = "Pharma Whey Protein 2196 gr Çikolata Aromalı",
                            Price = 690m,
                            ProductType = "besin",
                            Purchaseprice = 460m,
                            Status = true,
                            Stock = 24
                        },
                        new
                        {
                            Id = 14,
                            Description = "Bigjoy Sports BIGWHEY Whey Protein Classic Çikolata 1020g 30 Servis",
                            ImgUrl = "/images/p13.jpeg",
                            Name = "Bigjoy BIGWHEY Whey Protein Classic Çikolata",
                            Price = 786m,
                            ProductType = "besin",
                            Purchaseprice = 360m,
                            Status = true,
                            Stock = 15
                        });
                });

            modelBuilder.Entity("FitMax.Entity.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("FitMax.Entity.Entities.WalletDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FitMax.Entity.Entities.CartLine", b =>
                {
                    b.HasOne("FitMax.Entity.Entities.Cart", "Cart")
                        .WithMany("CartLines")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitMax.Entity.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FitMax.Entity.Entities.WalletDetail", b =>
                {
                    b.HasOne("FitMax.Entity.Entities.Wallet", "Wallet")
                        .WithMany("WalletDetails")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("FitMax.DataAccess.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FitMax.DataAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FitMax.DataAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("FitMax.DataAccess.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitMax.DataAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FitMax.DataAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitMax.Entity.Entities.Cart", b =>
                {
                    b.Navigation("CartLines");
                });

            modelBuilder.Entity("FitMax.Entity.Entities.Wallet", b =>
                {
                    b.Navigation("WalletDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
